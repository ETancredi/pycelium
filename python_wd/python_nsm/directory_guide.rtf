{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 hyphal_growth_model\

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  main.py                      		# Entry point for simulation logic (CLI/GUI runs call this)\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  config/                      		# Holds simulation configuration files\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  sim_config.py            			# Defines the Options dataclass & config loading\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  param_config.json            		# JSON config file for CLI launch (single simulation)\
\uc0\u9474    \u9492 \u9472 \u9472  batch_config.json       			# JSON config file for batch runs / parameter sweeps\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  core/                        		# Core classes for the simulation model\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  mycel.py                 			# Defines the Mycelium structure (sections, tips)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  options.py               			# All configurable parameters (Options dataclass)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  point.py                 			# 3D point class (MPoint) used for positions\
\uc0\u9474    \u9492 \u9472 \u9472  section.py               			# Represents individual growing segments of the mycelium\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  compute/                     		# Field aggregation & processing logic\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  field_aggregator.py   			# Combines different field sources (nutrients, density)\
\uc0\u9474    \u9492 \u9472 \u9472  processor.py             			# Processes fields & orientations\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  io_utils/                   			# Input/output utilities (saving, checkpointing)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  autostop.py              			# Auto-stop simulation if no active tips remain\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  checkpoint.py            			# Saves simulation state periodically (Checkpoints)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  exporter.py              			# Exports simulation data (CSV, OBJ, time series)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  grid_export.py           			# Saves density grids as CSV or PNG\
\uc0\u9474    \u9492 \u9472 \u9472  saver.py                 			# JSON save/load of Mycelium states\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  tropisms/                    		# Field & growth direction logic (tropisms)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  field_finder.py          			# Generic field finder base\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  nutrient_field_finder.py 		# Finds nutrient gradients for growth\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  nutrient_field.py        			# Nutrient field definition & behaviour\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  orientator.py            			# Main logic for computing growth direction\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  sect_field_finder.py     		# Section-based field logic\
\uc0\u9474    \u9492 \u9472 \u9472  substrate.py             			# Defines substrates (for future extensions)\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  vis/                         			# Visualisation & plotting\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  analyser.py              			# Post-run analysis logic (branch stats etc)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  animate_growth.py        		# Animation of growth over time (MP4)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  animate2d.py             			# 2D animation support (alternative vis)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  anisotropy_grid.py       		# Handles anisotropy field grids\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  density_map.py           		# Density field visualisations (heatmaps)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  nutrient_vis.py          			# Plots nutrient fields (2D/3D)\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  plot2d.py               			# 2D plots of mycelium shape\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  plot3d.py                			# 3D static plots of mycelium\
\uc0\u9474    \u9492 \u9472 \u9472  plotly_3d_export.py      		# Exports 3D interactive HTML plots\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  analysis/                    		# Advanced analysis utilities\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  post_analysis.py         		# Branch angles, orientation analysis (with plots)\
\uc0\u9474    \u9492 \u9472 \u9472  stats_summary.py         		# Stats summarisation of a run\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  control/                     		# Runtime mutation / dynamic changes\
\uc0\u9474    \u9492 \u9472 \u9472  runtime_mutator.py       		# Mutates simulation params during a run (if enabled)\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  gui/                         			# GUI-related code\
\uc0\u9474    \u9492 \u9472 \u9472  sim_gui.py               			# PyQt/Tkinter GUI for configuring & launching sims\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  experiments/                 		# Batch running & sweeps\
\uc0\u9474    \u9492 \u9472 \u9472  batch_runner.py          		# Runs multiple simulations (sequential/parallel)\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  launcher/                    		# Launcher script for GUI/CLI/Sweep\
\uc0\u9474    \u9492 \u9472 \u9472  run.py                   			# Entry point that parses CLI args & launches modes\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  outputs/                     		# Latest single run outputs (GUI/CLI runs save here)\

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  batch_outputs/               		# All batch run outputs (folder per batch)\

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  checkpoints/                 		# Auto-generated checkpoints during runs\
\uc0\u9492 \u9472 \u9472  __pycache__/                 		# Compiled Python bytecode (auto-generated)\
}